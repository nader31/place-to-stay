import type { NextPage } from "next";
import Head from "next/head";
import type { RouterOutputs } from "~/utils/api";
import { api } from "~/utils/api";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";
import Link from "next/link";
import PageLayout from "~/components/layout";
import { MagnifyingGlassIcon } from "@heroicons/react/24/solid";
import { useState } from "react";

export type ListingWithUser = RouterOutputs["listings"]["getAll"][number];
export const ListingView = (props: ListingWithUser) => {
  const { listing, author } = props;
  return (
    <Link
      href={`/listing/${listing.id}`}
      key={listing.id}
      className="overflow-hidden"
    >
      {listing.images && listing.images.length > 0 && listing.images[0] ? (
        <Image
          src={listing.images[0].url}
          alt="Listing image"
          className="h-72 w-full rounded-3xl object-cover"
          width={300}
          height={288}
        />
      ) : (
        <div className="h-72 w-full rounded-3xl bg-gray-100"></div>
      )}
      <div className="py-2">
        <p className="overflow-hidden text-ellipsis whitespace-nowrap font-semibold">
          {listing.title}
        </p>
        <p className="overflow-hidden overflow-ellipsis whitespace-nowrap text-sm text-gray-400">
          {listing.description}
        </p>
        <p className="mt-2">
          <span className="font-bold">{listing.price}â‚¬</span> night
        </p>
        {author && (
          <Link href={`/${author.id}`} className="mt-2 flex items-center gap-2">
            <Image
              src={author?.profileImageURL}
              className="h-5 w-5 rounded-full"
              alt="Profile image"
              width={20}
              height={20}
            />
            <p className="text-xs">{author?.name}</p>
          </Link>
        )}
      </div>
    </Link>
  );
};

const Listings = () => {
  const [search, setSearch] = useState("");
  const { data, isLoading: listingsLoading } = api.listings.getAll.useQuery();

  if (listingsLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;

  const filteredData = data.filter(
    (item) =>
      item?.listing?.city?.toLowerCase().includes(search.toLowerCase()) ||
      item?.listing?.country?.toLowerCase().includes(search.toLowerCase()) ||
      item?.listing?.title.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div>
      <div className="mx-auto mb-10 max-w-md">
        <div className="relative flex h-12 w-full items-center overflow-hidden rounded-full border bg-white">
          <div className="grid h-full w-12 place-items-center text-gray-300">
            <MagnifyingGlassIcon className="h-5 w-5" />
          </div>

          <input
            className="peer h-full w-full pr-2 text-sm text-gray-700 outline-none"
            type="text"
            id="search"
            placeholder="Rechercher une ville, un logement..."
            onChange={(e) => setSearch(e.target.value)}
            value={search}
            autoFocus
          />
        </div>
      </div>
      <div className="grid gap-4 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
        {filteredData.map((fullListing) => (
          <ListingView {...fullListing} key={fullListing.listing.id} />
        ))}
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Place To Stay</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageLayout>
        <h1 className="mb-10 text-center text-5xl font-bold">
          Find your place to <span className="text-rose-600">stay</span>
        </h1>
        <Listings />
      </PageLayout>
    </>
  );
};

export default Home;
